#!/usr/bin/with-contenv bashio

bashio::log.info "Running Crowdsec addon"

# Declare variables
declare acquisition
declare collections
declare parsers
declare scenarios
declare postoverflows
declare parsers_to_disable
declare scenarios_to_disable
declare console_enroll_key
declare console_enroll_name
declare console_enroll_tags
declare disable_online_api

#  Get all arguments
acquisition=$(bashio::config 'acquisition')
collections=$(bashio::config 'collections')
parsers=$(bashio::config 'parsers')
scenarios=$(bashio::config 'scenarios')
postoverflows=$(bashio::config 'postoverflows')
parsers_to_disable=$(bashio::config 'parsers_to_disable')
scenarios_to_disable=$(bashio::config 'scenarios_to_disable')
console_enroll_key=$(bashio::config 'console_enroll_key')
console_enroll_name=$(bashio::config 'console_enroll_name')
console_enroll_tags=$(bashio::config 'console_enroll_tags')
disable_online_api=$(bashio::config 'disable_online_api')

# Copy Crowdsec config and data files to make it persistent if it's not already
if [ -d "/config/.storage/crowdsec/config/" ]; then
    bashio::log.info "Crowdsec config directory already persistent..."
else
    mkdir -p /config/.storage/crowdsec/config/
    cp -r /etc/crowdsec/* /config/.storage/crowdsec/config/
    for elem in $(find /config/.storage/crowdsec/config/ -type l); do
        oldlink=$(readlink $elem)
        if [[ "$oldlink" == *"/config/.storage/"* ]]; then
            continue
        else
            newlink="${oldlink//\/etc\/crowdsec/\/config\/.storage\/crowdsec\/config}"
            ln -sf ${newlink} $elem
        fi
    done
    sed -i 's#/etc/crowdsec/#/config/.storage/crowdsec/config/#g' /config/.storage/crowdsec/config/config.yaml
fi
if [ -d "/config/.storage/crowdsec/data/" ]; then
    bashio::log.info "Crowdsec data directory already persistent..."
else
    mkdir -p /config/.storage/crowdsec/data/
    cp -r /var/lib/crowdsec/data/* /config/.storage/crowdsec/data/
    sed -i 's#/var/lib/crowdsec/data/#/config/.storage/crowdsec/data/#g' /config/.storage/crowdsec/config/config.yaml
fi

# Set acquis.yaml file
echo "${acquisition}" > /config/.storage/crowdsec/config/acquis.yaml

## Environment variables settings

# Disable or not the Online API
if bashio::var.true "${disable_online_api}"; then
    bashio::log.info "DISABLE ONLINE API..."
    yq eval -i '.api.server.online_client = {"credentials_path": ""}' /config/.storage/crowdsec/config/config.yaml
    #export DISABLE_ONLINE_API="true"
else
    yq eval -i '.api.server.online_client = {"credentials_path": "/config/.storage/crowdsec/config/online_api_credentials.yaml"}' /config/.storage/crowdsec/config/config.yaml
    if ! bashio::fs.file_exists "/config/.storage/crowdsec/config/online_api_credentials.yaml"; then
        cscli -c /config/.storage/crowdsec/config/config.yaml capi register > /config/.storage/crowdsec/config/online_api_credentials.yaml
        bashio::log.info "Registration to online API done"
    fi
fi

# Set collections to install env var
COLLECTIONS=""
if [[ ! -z "${collections}" ]]; then
    for item in "${collections}"; do
        COLLECTIONS="${COLLECTIONS}${item} "
    done
    export COLLECTIONS="${COLLECTIONS}"
fi

# Set parsers to install env var
PARSERS=""
if [[ ! -z "${parsers}" ]]; then
    for item in "${parsers}"; do
        PARSERS="${PARSERS}${item} "
    done
    export PARSERS="${PARSERS}"
fi

# Set scenarios to install env var
SCENARIOS=""
if [[ ! -z "${scenarios}" ]]; then
    for item in "${scenarios}"; do
        SCENARIOS="${SCENARIOS}${item} "
    done
    export SCENARIOS="${SCENARIOS}"
fi

# Set scenarios to install env var
POSTOVERFLOWS=""
if [[ ! -z "${postoverflows}" ]]; then
    for item in "${postoverflows}"; do
        POSTOVERFLOWS="${POSTOVERFLOWS}${item} "
    done
    export POSTOVERFLOWS="${POSTOVERFLOWS}"
fi

#Set parsers to disable en var
DISABLE_PARSERS=""
if [[ ! -z "${parsers_to_disable}" ]]; then
    for item in "${parsers_to_disable}"; do
        DISABLE_PARSERS="${DISABLE_PARSERS}${item} "
    done
    export DISABLE_PARSERS="${DISABLE_PARSERS}"
fi

#Set scenarios to disable en var
DISABLE_SCENARIOS=""
if [[ ! -z "${scenarios_to_disable}" ]]; then
    for item in "${scenarios_to_disable}"; do
        DISABLE_SCENARIOS="${DISABLE_SCENARIOS}${item} "
    done
    export DISABLE_SCENARIOS="${DISABLE_SCENARIOS}"
fi

#Enroll instance if console_enroll_key is provided and online API enabled
if bashio::var.false "${disable_online_api}"; then
    if [ ! -f "/config/.storage/crowdsec/config/is_enrolled" ]; then
        INSTANCE_TAGS=""
        if [[ ! -z "${console_enroll_tags}" ]]; then
            for item in "${console_enroll_tags}"; do
                bashio::log.info "${item}"
                INSTANCE_TAGS="${INSTANCE_TAGS}-t ${item} "
            done
        fi
        INSTANCE_NAME=""
        if [[ ! -z "${console_enroll_name}" ]]; then
            INSTANCE_NAME="--name ${console_enroll_name}"
        fi
        if [[ ! -z "${console_enroll_key}" ]]; then
            bashio::log.info "cscli console enroll ${INSTANCE_NAME} ${INSTANCE_TAGS} ${console_enroll_key}"
            cscli -c /config/.storage/crowdsec/config/config.yaml console enroll ${INSTANCE_NAME} ${INSTANCE_TAGS} ${console_enroll_key}
            touch /config/.storage/crowdsec/config/is_enrolled
        fi
    else
        bashio::log.info "Already enrolled instance"
    fi
fi


exec bash /docker_start.sh
